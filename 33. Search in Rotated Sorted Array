class Solution {
    static int search(int[] nums, int target) {
		int pivot =findPivot(nums);
		if(pivot== -1) {
			return binarySearch(nums,target,0,nums.length-1);
		}
		if(nums[pivot]==target) {
			return pivot;
		}
		if(target>=nums[0]) {
			return binarySearch(nums,target,0,pivot-1);
		}
		return binarySearch(nums,target,pivot+1,nums.length-1);
	}

static int findPivot(int[] nums) {
	int s=0;
	int e=nums.length-1;
	while(s<=e) {
		int mid=(s+e)/2;
		
		if(mid<e && nums[mid] > nums[mid+1]) {
			return mid;
		}
		if(mid>s  && nums[mid] <nums[mid-1]) {
			return mid-1;
		}
		if(nums[mid] <= nums[s]) {
			e=mid-1;
		}
		else {
			s=mid+1;
			
		}
	}
		return -1;
	}

static int binarySearch(int[] arr, int target, int start, int end) {
	int start1=0;
	int end1=arr.length-1;
	
	while(start1<=end1) {
		int mid = (start1+end1)/2;
		
		if(target<arr[mid]) {
			end1=mid-1;
			
		}
		else if(target>arr[mid]) {
			start1=mid+1;
			
		}
		else{
			return mid;
		}
	}
	return start;
}
   
}
